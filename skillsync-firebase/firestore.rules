rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function uid() {
      return request.auth != null ? request.auth.uid : null;
    }

    function hasRole(role) {
      return isSignedIn() && role in request.auth.token.roles;
    }

    function isOwner(resourceUID) {
      return isSignedIn() && uid() == resourceUID;
    }

    /* USERS
      /users/{uid}
      Publicly readable limited fields, owner writable
    */
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.uid);
      allow update: if isOwner(resource.data.uid);
      allow delete: if hasRole("admin");
    }

    /* COMPANIES
      Recruiters belong to companies. Admin can create; recruiters can create/update their own.
    */
    match /companies/{companyId} {
      allow read: if true;
      allow create: if hasRole("admin") || hasRole("recruiter");
      allow update, delete: if hasRole("admin") || (hasRole("recruiter") && request.resource.data.ownerUid == uid());
    }

    /* JOBS
      /jobs/{jobId}
      Created/managed by recruiters.
    */
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if hasRole("recruiter");
      allow update, delete: if hasRole("admin") || (hasRole("recruiter") && resource.data.createdBy == uid());
    }

    /* APPLICATIONS
      /applications/{applicationId}
      Created by candidates; recruiters who own the job can read.
    */
    match /applications/{applicationId} {
      allow create: if hasRole("candidate") && request.resource.data.applicantUid == uid();
      allow read: if isOwner(resource.data.applicantUid) 
                   || hasRole("admin")
                   || (hasRole("recruiter") && resource.data.jobCreatedBy == uid());
      allow update: if isOwner(resource.data.applicantUid);
      allow delete: if hasRole("admin") || isOwner(resource.data.applicantUid);
    }

    /* CHATS + MESSAGES
       /chats/{chatId} with participants array field
       /chats/{chatId}/messages/{messageId}
    */
    match /chats/{chatId} {
      allow read, update, delete: if isSignedIn() && (uid() in resource.data.participants);
      allow create: if isSignedIn() && (uid() in request.resource.data.participants);
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && (uid() in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow delete: if hasRole("admin");
        allow update: if false; // messages are immutable
      }
    }

    /* SKILLS dictionary (public) */
    match /skills/{skillId} {
      allow read: if true;
      allow write: if hasRole("admin");
    }

    /* ADMIN collection; admins only */
    match /admin/{doc=**} {
      allow read, write: if hasRole("admin");
    }
  }
}